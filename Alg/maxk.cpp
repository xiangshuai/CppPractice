#include <iostream>
#include <vector>
#include <algorithm>
#include <cfloat>

using namespace std;
class Point
{
public:
    Point(float x, float y):x(x),y(y) {}
public:
    float x;
    float y;
};

bool less_first(const Point &pt1, const Point &pt2)
{
    return pt1.x < pt2.x;
}

void printPts(const vector<Point> pts)
{
    for(int i=0; i<pts.size(); i++)
    {
        cout << "point " << i << ": (" <<pts[i].x << "," << pts[i].y << ")"<< endl;
    }
}

float findMaxK(const vector<Point> &pts, int &index)
{
    float maxK = FLT_MIN;
    for(int i=1; i<pts.size(); i++)
    {
        Point pt1 = pts[i-1];
        Point pt2 = pts[i];
        float k = (pt2.y-pt1.y)/(pt2.x-pt1.x); // 斜率(point[i-1],point[i]))
        if(maxK < k)
        {
            maxK = k;
            index = i;
        }
    }
    return maxK;
}

int main()
{
    vector<Point> points;
    points.push_back(Point(2.3, 3.5));
    points.push_back(Point(7.2, 3.5));
    points.push_back(Point(5.5, 6.4));
    points.push_back(Point(2.3, 1.3));
    points.push_back(Point(6.6, 8.1));
    points.push_back(Point(1.7, 6.0));
    points.push_back(Point(4.8, 5.4));
    points.push_back(Point(0.7, 7.5));
    //printPts(points);

    // N个点按x排序
    sort(points.begin(), points.end(), less_first);
    printPts(points);

    int index;
    float maxK = findMaxK(points, index);
    cout << "max k: " << maxK << " generated by point " << index - 1 << " and point " << index << "." << endl;

    return 0;
}
